const video = document.querySelector('.webcam');
const canvas = document.querySelector('.video');
const ctx = canvas.getContext('2d');
const faceCanvas = document.querySelector('.face');
const faceCtx = faceCanvas.getContext('2d');
const faceDetector = new window.FaceDetector({
  fastMode: true
}); // console.log(video, canvas, faceCanvas, faceDetector);

SIZE = 30; //write function that will populate users video

async function populateVideo() {
  //grabbing feed off user webcam
  const stream = await navigator.mediaDevices.getUserMedia({
    video: {
      width: 1280,
      height: 720
    }
  }); //console.log(stream);
  //set object to be strea,

  video.srcObject = stream; //play vid

  await video.play(); //size canvases to be same size as video
  //console.log(video.videoWidth, video.videoHeight);

  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  faceCanvas.width = video.videoWidth;
  faceCanvas.height = video.videoHeight;
}

async function detect() {
  //pass it image, video, or canvas - our case the video
  const faces = await faceDetector.detect(video);
  console.log(faces);
  faces.forEach(censor);
  faces.forEach(drawFace); //ask browser when next animation frame is, and tell it to run - recursion - when a function calls itself

  requestAnimationFrame(detect);
}

function drawFace(face) {
  //console.log(face)
  const {
    width,
    height,
    top,
    left
  } = face.boundingBox; //console.log({width, height, top, left});

  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.strokeStyle = 'turquoise';
  ctx.lineWidth = 2;
  ctx.strokeRect(left, top, width, height);
}

function censor({
  boundingBox: face
}) {
  //console.log(face);
  faceCtx.imageSmoothEnabled = false;
  faceCtx.clearRect(0, 0, faceCanvas.width, faceCanvas.height); //draw small face

  faceCtx.drawImage( //5 source args - pulling out
  faceCanvas, face.x, face.y, face.width, face.height, // 4 draw args
  face.x, face.y, SIZE, SIZE); //take face back out and draw it at normal size

  faceCtx.drawImage(video, face.x, face.y, SIZE, SIZE, //drawing args
  face.x, face.y, face.width, face.height);
}

populateVideo().then(detect);